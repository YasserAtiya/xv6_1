cat.c:    close(fd);
cuth:	close(F);
cuth:	close(F);
defs.h:void            fileclose(struct file*);
defs.h:void            pipeclose(struct pipe*, int);
dot-bochsrc:# you must tweak the 'cpu: ips=N' directive to be as close to the number
file.c:// Close file f.  (Decrement ref count, close when reaches 0.)
file.c:fileclose(struct file *f)
file.c:    panic("fileclose");
file.c:    pipeclose(ff.pipe, ff.writable);
grep.c:    close(fd);
log.c:// But if it thinks the log is close to running out, it
ls.c:    close(fd);
ls.c:  close(fd);
mkfs.c:    close(fd);
Notes:test pipe reader closes then write
Notes:sh: chain of pipes won't work, also ugly that parent closes fdarray entries too
pipe.c:    fileclose(*f0);
pipe.c:    fileclose(*f1);
pipe.c:pipeclose(struct pipe *p, int writable)
proc.c:      fileclose(proc->ofile[fd]);
runoff:	close(f)
runoff.spec:#	fileinit filealloc filedup fileclose filestat fileread filewrite
sh.c:    close(rcmd->fd);
sh.c:      close(1);
sh.c:      close(p[0]);
sh.c:      close(p[1]);
sh.c:      close(0);
sh.c:      close(p[0]);
sh.c:      close(p[1]);
sh.c:    close(p[0]);
sh.c:    close(p[1]);
sh.c:      close(fd);
sign.pl:close SIG;
stressfs.c:  close(fd);
stressfs.c:  close(fd);
syscall.c:extern int sys_close(void);
syscall.c:[SYS_close]   sys_close,
syscall.h:#define SYS_close  21
sysfile.c:sys_close(void)
sysfile.c:  fileclose(f);
sysfile.c:      fileclose(f);
sysfile.c:    fileclose(rf);
sysfile.c:    fileclose(wf);
ulib.c:  close(fd);
user.h:int close(int);
usertests.c:  close(fd);
usertests.c:  close(fd);
usertests.c:  close(fd);
usertests.c:  close(fd);
usertests.c:  close(fd);
usertests.c:    close(fd);
usertests.c:    close(fds[0]);
usertests.c:    close(fds[1]);
usertests.c:    close(fds[0]);
usertests.c:    close(pfds[0]);
usertests.c:    close(pfds[1]);
usertests.c:  close(pfds[1]);
usertests.c:  close(pfds[0]);
usertests.c:  close(fd);
usertests.c:  close(fd);
usertests.c:    close(fd);
usertests.c:        close(fd);
usertests.c:        close(fd);
usertests.c:  close(fd);
usertests.c:  close(fd1);
usertests.c:  close(fd);
usertests.c:  close(fd);
usertests.c:  close(fd);
usertests.c:      close(fd);
usertests.c:  close(fd);
usertests.c:      close(open(file, 0));
usertests.c:      close(open(file, 0));
usertests.c:      close(open(file, 0));
usertests.c:      close(open(file, 0));
usertests.c:      close(open("x", O_RDWR | O_CREATE));
usertests.c:  close(fd);
usertests.c:  close(fd);
usertests.c:  close(fd);
usertests.c:  close(fd);
usertests.c:  close(fd);
usertests.c:    close(fd);
usertests.c:  close(fd);
usertests.c:  close(fd);
usertests.c:  close(fd);
usertests.c:  close(fd);
usertests.c:  close(fd);
usertests.c:  close(fd);
usertests.c:      close(fd);
usertests.c:      close(fd);
usertests.c:    close(fd);
usertests.c:  close(fd);
usertests.c:    close(fd);
usertests.c:  close(open("usertests.ran", O_CREATE));
usys.S:SYSCALL(close)
wc.c:    close(fd);
